// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/go-template/internal/metrics (interfaces: Interface)

// Package mock_metrics is a generated GoMock package.
package mock_metrics

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// InflightRequestsGaugeAdd mocks base method.
func (m *MockInterface) InflightRequestsGaugeAdd(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InflightRequestsGaugeAdd", arg0)
}

// InflightRequestsGaugeAdd indicates an expected call of InflightRequestsGaugeAdd.
func (mr *MockInterfaceMockRecorder) InflightRequestsGaugeAdd(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InflightRequestsGaugeAdd", reflect.TypeOf((*MockInterface)(nil).InflightRequestsGaugeAdd), arg0)
}

// RequestCountInc mocks base method.
func (m *MockInterface) RequestCountInc(arg0 string, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestCountInc", arg0, arg1)
}

// RequestCountInc indicates an expected call of RequestCountInc.
func (mr *MockInterfaceMockRecorder) RequestCountInc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCountInc", reflect.TypeOf((*MockInterface)(nil).RequestCountInc), arg0, arg1)
}

// ResponseBytesCountAdd mocks base method.
func (m *MockInterface) ResponseBytesCountAdd(arg0 string, arg1, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResponseBytesCountAdd", arg0, arg1, arg2)
}

// ResponseBytesCountAdd indicates an expected call of ResponseBytesCountAdd.
func (mr *MockInterfaceMockRecorder) ResponseBytesCountAdd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseBytesCountAdd", reflect.TypeOf((*MockInterface)(nil).ResponseBytesCountAdd), arg0, arg1, arg2)
}

// ResponseTimeHistogramObserve mocks base method.
func (m *MockInterface) ResponseTimeHistogramObserve(arg0 string, arg1 int, arg2 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResponseTimeHistogramObserve", arg0, arg1, arg2)
}

// ResponseTimeHistogramObserve indicates an expected call of ResponseTimeHistogramObserve.
func (mr *MockInterfaceMockRecorder) ResponseTimeHistogramObserve(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseTimeHistogramObserve", reflect.TypeOf((*MockInterface)(nil).ResponseTimeHistogramObserve), arg0, arg1, arg2)
}
