// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/go-template/internal/server/httperr (interfaces: Responder)

// Package mock_httperr is a generated GoMock package.
package mock_httperr

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResponder is a mock of Responder interface.
type MockResponder struct {
	ctrl     *gomock.Controller
	recorder *MockResponderMockRecorder
}

// MockResponderMockRecorder is the mock recorder for MockResponder.
type MockResponderMockRecorder struct {
	mock *MockResponder
}

// NewMockResponder creates a new mock instance.
func NewMockResponder(ctrl *gomock.Controller) *MockResponder {
	mock := &MockResponder{ctrl: ctrl}
	mock.recorder = &MockResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponder) EXPECT() *MockResponderMockRecorder {
	return m.recorder
}

// Respond mocks base method.
func (m *MockResponder) Respond(arg0 http.ResponseWriter, arg1 int, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Respond", arg0, arg1, arg2)
}

// Respond indicates an expected call of Respond.
func (mr *MockResponderMockRecorder) Respond(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockResponder)(nil).Respond), arg0, arg1, arg2)
}
